% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search_dictionary.r
\name{search_dictionary}
\alias{search_dictionary}
\title{Dictionary lookup}
\usage{
search_dictionary(tc, dict, regex_sep = " ", token_col = "token",
  case_sensitive = F, batchsize = 50000, flatten_colloc = T,
  ascii = F, low_memory = F, verbose = F)
}
\arguments{
\item{tc}{A tCorpus}

\item{dict}{A data.frame with the columns "string" and "id". The text in "string" will be matched to the tokens, and "id" will be the id given to tokens that matched}

\item{regex_sep}{A regular expression for splitting multiple terms in dict$string. By default whitespace.}

\item{token_col}{The feature in tc that contains the token text.}

\item{case_sensitive}{logical, should lookup be case sensitive?}

\item{batchsize}{Very large dictionaries will be matched in batches to prevent memory issues.}

\item{flatten_colloc}{If true, collocations in the tokens (rows in tc$tokens) will be considered separate words. For example, "President_Obama" will be split to "president" "obama", so that "president obama" in the dictionary matches correctly.}

\item{ascii}{If true, convert text to ascii before matching}

\item{low_memory}{if true, use slower but more memory efficient algorithm}

\item{verbose}{If true, report progress}
}
\value{
A vector with the id value (taken from dict$id) for each row in tc$tokens
}
\description{
Fast matching of large lookup dictionaries.
}
\examples{
dict = data.frame(string = c('this is', 'a', 'test'), id=1:3)
tc = create_tcorpus(c('this is a test','This town is not big enough for a test'))
search_dictionary(tc, dict)
}
